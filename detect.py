import os
import time
import datetime
import cv2
import numpy as np
from ultralytics import YOLO
from sqlalchemy.orm import Session
from database import SessionLocal
import models

# –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = YOLO("yolov10s.pt")

def process_workstations():
    db: Session = SessionLocal()
    try:
        # –ø–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ —Å enabled=True
        workstations = (
            db.query(models.Workstation)
            .filter(models.Workstation.enabled == True)
            .all()
        )

        for ws in workstations:
            camera = db.query(models.Camera).filter_by(id=ws.camera_id, enabled=True).first()
            if not camera:
                continue

            # –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã
            cap = cv2.VideoCapture(camera.rtsp_url)
            ret, frame = cap.read()
            cap.release()
            if not ret:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã {camera.name}")
                continue

            # ROI
            roi = frame[ws.y:ws.y+ws.h, ws.x:ws.x+ws.w]

            # –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª—å
            results = model.predict(roi, verbose=False)

            person_found = 0
            conf_percent = 0.0
            for r in results:
                for box, cls, conf in zip(r.boxes.xyxy, r.boxes.cls, r.boxes.conf):
                    if int(cls) == 0:  # –∫–ª–∞—Å—Å 0 = "person"
                        person_found += 1
                        conf_percent = float(conf.item()) * 100
                        # —Ä–∏—Å—É–µ–º —Ä–∞–º–∫—É
                        x1, y1, x2, y2 = map(int, box)
                        cv2.rectangle(roi, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv2.putText(
                            roi,
                            f"{conf_percent:.1f}%",
                            (x1, max(y1-10, 0)),
                            cv2.FONT_HERSHEY_SIMPLEX,
                            2, (0,255,0), 4
                        )
                        # break

            BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç)
            images_root = os.path.join(BASE_DIR, "images")  # –ø–∞–ø–∫–∞ images –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞



            # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ frames

            frame_rec = models.Frame(
                workstation_id=ws.id,
                captured_at=datetime.datetime.now(),
                trigger="–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                people_count=person_found,
                conf=conf_percent
            )
            db.add(frame_rec)
            db.commit()
            db.refresh(frame_rec)

            # –∏–º—è –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ –¥–∞—Ç–µ
            date_folder = datetime.datetime.utcnow().strftime("%d%b%Y")
            folder = os.path.join(images_root, date_folder)

            # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(folder, exist_ok=True)

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ROI
            filename = f"{ws.id}_{frame_rec.id}.jpg"
            filepath = os.path.join(folder, filename)
            cv2.imwrite(filepath, roi)

            # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –ø—É—Ç—ë–º
            frame_rec.thumb_path = filename
            db.commit()



            print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç {filepath}, person_found={person_found}")

    finally:
        db.close()

def main():
    while True:
        now = datetime.datetime.now().time()
        start = datetime.time(5, 30)
        end = datetime.time(20, 0)

        if start <= now <= end:
            process_workstations()
        else:
            print("‚è∏ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (05:30-20:00)")

        # —Å–ø–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        time.sleep(10)

if __name__ == "__main__":
    main()
