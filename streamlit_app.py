import streamlit as st
import requests
import time
import cv2
import numpy as np
from ultralytics import YOLO
from io import BytesIO
from PIL import Image


# API_URL = "http://192.168.13.89:8005"  # –∞–¥—Ä–µ—Å —Ç–≤–æ–µ–≥–æ FastAPI
API_URL = "http://127.0.0.1:8005"
st.set_page_config(page_title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–∞–º–∏ –∏ —Ä–∞–±–æ—á–∏–º–∏ –º–µ—Å—Ç–∞–º–∏", layout="wide")

st.title("üé• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–∞–º–∏ –∏ —Ä–∞–±–æ—á–∏–º–∏ –º–µ—Å—Ç–∞–º–∏")

model = YOLO("yolov10s.pt")

# –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
st.markdown(
    """
    <style>
        #MainMenu {visibility: hidden;}
        footer {visibility: hidden;}
        header {visibility: hidden;}
    </style>
     <style>
        /* —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ —Å–≤–µ—Ä—Ö—É */
        .block-container {
            padding-top: 1rem; /* –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ~6rem */
        }
    </style>
    
    """,
    unsafe_allow_html=True
)

tab1, tab2 = st.tabs(["–ö–∞–º–µ—Ä—ã", "–†–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞"])

# ----- –ö–ê–ú–ï–†–´ -----
with tab1:
    st.header("–°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä")

    # –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä
    try:
        cameras = requests.get(f"{API_URL}/cameras").json()
    except Exception as e:
        st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        cameras = []

    for cam in cameras:
        status_icon = "üü¢" if cam["enabled"] else "üî¥"
        with st.expander(f"üì∑ {cam['name']} {status_icon}"):
            name = st.text_input("–ò–º—è", cam["name"], key=f"name_{cam['id']}")
            rtsp = st.text_input("RTSP", cam["rtsp_url"], key=f"rtsp_{cam['id']}")
            interval = st.number_input("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã (—Å–µ–∫)",  min_value=1, value=cam["poll_interval_s"], key=f"int_{cam['id']}")
            enabled = st.checkbox("–ö–∞–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è", value=cam["enabled"], key=f"enabled_{cam['id']}")

            st.markdown("---")

            # üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–æ–º: snapshot –∏–ª–∏ stream
            key_state = f"stream_active_{cam['id']}"
            if key_state not in st.session_state:
                st.session_state[key_state] = False  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Ç–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω

            if not st.session_state[key_state]:
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º snapshot
                cachebuster = int(time.time() * 1000)
                st.markdown(
                    f"""
                            <img src="{API_URL}/cameras/{cam['id']}/snapshot?cachebuster={cachebuster}"
                                 width="640" height="480"
                                 style="border:1px solid #ccc;"/>
                            """,
                    unsafe_allow_html=True
                )
                if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫", key=f"start_stream_{cam['id']}"):
                    st.session_state[key_state] = True
                    st.rerun()
            else:
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º stream
                st.markdown(
                    f"""
                            <img src="{API_URL}/cameras/{cam['id']}/stream"
                                 width="640" height="480"
                                 style="border:1px solid #ccc;"/>
                            """,
                    unsafe_allow_html=True
                )
                if st.button("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫", key=f"stop_stream_{cam['id']}"):
                    st.session_state[key_state] = False
                    st.rerun()

            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_{cam['id']}"):
                payload = {"name": name, "rtsp_url": rtsp, "poll_interval_s": interval, "enabled": enabled}
                requests.put(f"{API_URL}/cameras/{cam['id']}", json=payload)
                st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")



            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å ‚Üí —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥
            if st.button(f"‚ùå –£–¥–∞–ª–∏—Ç—å  –∫–∞–º–µ—Ä—É", key=f"del_{cam['id']}"):
                st.session_state[f"confirm_delete_{cam['id']}"] = True

            # –ï—Å–ª–∏ —Ñ–ª–∞–≥ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if st.session_state.get(f"confirm_delete_{cam['id']}"):
                st.warning("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞–º–µ—Ä—É?")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", key=f"yes_{cam['id']}"):
                        requests.delete(f"{API_URL}/cameras/{cam['id']}")
                        st.success("–£–¥–∞–ª–µ–Ω–æ ‚ùå")
                        st.session_state[f"confirm_delete_{cam['id']}"] = False
                        st.rerun()  # —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ä–∞–∑—É
                with col2:
                    if st.button("‚ùå –û—Ç–º–µ–Ω–∞", key=f"no_{cam['id']}"):
                        st.session_state[f"confirm_delete_{cam['id']}"] = False
                        st.rerun()  # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞–º–µ—Ä—É")
    new_name = st.text_input("–ò–º—è –Ω–æ–≤–æ–π –∫–∞–º–µ—Ä—ã")
    new_rtsp = st.text_input("RTSP –Ω–æ–≤–æ–π –∫–∞–º–µ—Ä—ã")
    new_interval = st.number_input("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã (—Å–µ–∫)", value=10)

    if st.button("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É"):
        payload = {"name": new_name, "rtsp_url": new_rtsp, "poll_interval_s": new_interval, "enabled" : True}
        requests.post(f"{API_URL}/cameras", json=payload)
        st.success("–ö–∞–º–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
        for k in ["new_name", "new_rtsp", "new_interval"]:
            st.session_state[k] = "" if "name" in k or "rtsp" in k else 10
        st.rerun()

    # ----- –†–ê–ë–û–ß–ò–ï –ú–ï–°–¢–ê -----
with tab2:
    st.header("–†–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞")

    # –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç
    try:
        workstations = requests.get(f"{API_URL}/workstations").json()
    except Exception:
        st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        workstations = []

    # –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä (–¥–ª—è –≤—ã–±–æ—Ä–∞)
    try:
        cameras = requests.get(f"{API_URL}/cameras").json()
    except Exception:
        st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä")
        cameras = []

    camera_options = {cam["id"]: cam["name"] for cam in cameras}

    for ws in workstations:

        status_icon = "üü¢" if ws["enabled"] else "üî¥"

        with st.expander(f"üë∑ {ws['name']} {status_icon}"):
            name = st.text_input("–ò–º—è", ws["name"], key=f"ws_name_{ws['id']}")

            camera_id = st.selectbox(
                "–ö–∞–º–µ—Ä–∞",
                options=list(camera_options.keys()),
                format_func=lambda x: f"{camera_options.get(x, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ",
                index=list(camera_options.keys()).index(ws["camera_id"]) if ws["camera_id"] in camera_options else 0,
                key=f"ws_cam_{ws['id']}"
            )

            c1, c2, c3, c4 = st.columns(4)
            x = c1.number_input("X", min_value=0, value=int(ws["x"]), step=1, key=f"ws_x_{ws['id']}")
            y = c2.number_input("Y", min_value=0, value=int(ws["y"]), step=1, key=f"ws_y_{ws['id']}")
            w = c3.number_input("–®–∏—Ä–∏–Ω–∞", min_value=1, value=int(ws["w"]), step=1, key=f"ws_w_{ws['id']}")
            h = c4.number_input("–í—ã—Å–æ—Ç–∞", min_value=1, value=int(ws["h"]), step=1, key=f"ws_h_{ws['id']}")

            ws_enabled = st.checkbox("–†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è", value=ws["enabled"], key=f"ws_enabled_{ws['id']}")

            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"ws_save_{ws['id']}"):
                payload = {
                    "name": name,
                    "camera_id": int(camera_id),
                    "x": int(x),
                    "y": int(y),
                    "w": int(w),
                    "h": int(h),
                    "enabled": ws_enabled
                }
                r = requests.put(f"{API_URL}/workstations/{ws['id']}", json=payload)
                if r.status_code == 200:
                    st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
                    # –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
                    st.session_state[f"ws_snapshot_refresh_{ws['id']}"] = True
                    st.rerun()
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {r.text}")

            st.markdown("---")

            # —Å–æ–∑–¥–∞—ë–º 2 –∫–æ–ª–æ–Ω–∫–∏: –ª–µ–≤–∞—è –ø–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø—Ä–∞–≤–∞—è –ø–æ–¥ –∫–Ω–æ–ø–∫—É
            col_img, col_btn = st.columns([1, 2])

            with col_btn:
                if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", key=f"ws_refresh_{ws['id']}"):
                    st.session_state[f"ws_snapshot_refresh_{ws['id']}"] = True
                    st.rerun()
                if st.button("üëÅ –ü—Ä–æ–≤–µ—Ä–∫–∞", key=f"ws_check_{ws['id']}"):
                    url = f"{API_URL}/workstations/{ws['id']}/snapshot?cb={int(time.time())}"
                    resp = requests.get(url)
                    if resp.status_code == 200:
                        img = Image.open(BytesIO(resp.content)).convert("RGB")
                        img_np = np.array(img)

                        results = model.predict(img_np)

                        found = False
                        roi_crop = img_np[
                                   ws["y"]: ws["y"] + ws["h"],
                                   ws["x"]: ws["x"] + ws["w"]
                                   ]

                        for r in results:
                            for box, cls, conf in zip(r.boxes.xyxy, r.boxes.cls, r.boxes.conf):
                                if int(cls) == 0:  # –∫–ª–∞—Å—Å 0 = "person"
                                    x1, y1, x2, y2 = map(int, box)
                                    if (
                                            x1 >= ws["x"] and y1 >= ws["y"] and
                                            x2 <= ws["x"] + ws["w"] and
                                            y2 <= ws["y"] + ws["h"]
                                    ):
                                        found = True

                                        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ ROI
                                        rx1, ry1 = x1 - ws["x"], y1 - ws["y"]
                                        rx2, ry2 = x2 - ws["x"], y2 - ws["y"]

                                        # confidence –≤ %
                                        conf_percent = f"{conf.item() * 100:.1f}%"

                                        # —Ä–∏—Å—É–µ–º —Ä–∞–º–∫—É + –ø–æ–¥–ø–∏—Å—å
                                        roi_crop = roi_crop.copy()
                                        cv2.rectangle(
                                            roi_crop,
                                            (rx1, ry1),
                                            (rx2, ry2),
                                            (0, 255, 0), 2
                                        )
                                        cv2.putText(
                                            roi_crop,
                                            conf_percent,
                                            (rx1, max(ry1 - 20, 0)),
                                            cv2.FONT_HERSHEY_SIMPLEX,
                                            2,
                                            (0, 255, 0),
                                            4
                                        )
                                        break
                            if found:
                                break

                        if found:
                            st.success("‚úÖ –ß–µ–ª–æ–≤–µ–∫ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–º–µ—á–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
                        else:
                            st.warning("‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–º–µ—á–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")

                        st.image(roi_crop, caption="–û—Ç–º–µ—á–µ–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å", width=320)
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è snapshot")

            # —Ñ–ª–∞–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            refresh_key = f"ws_snapshot_refresh_{ws['id']}"
            if refresh_key not in st.session_state:
                st.session_state[refresh_key] = True  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º

            # üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–æ–º: snapshot –∏–ª–∏ stream
            key_state = f"ws_stream_active_{ws['id']}"
            if key_state not in st.session_state:
                st.session_state[key_state] = False  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Ç–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω

            if st.session_state[refresh_key]:
                with col_img:
                    cachebuster = int(time.time() * 1000)
                    st.markdown(
                        f"""
                                <img src="{API_URL}/workstations/{ws['id']}/snapshot?cachebuster={cachebuster}"
                                     width="640" height="480"
                                     style="border:1px solid #ccc;"/>
                                """,
                        unsafe_allow_html=True
                    )
                # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –≥—Ä—É–∑–∏–ª–∞—Å—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∑–∞–Ω–æ–≤–æ
                st.session_state[refresh_key] = False



            # –£–¥–∞–ª–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ", key=f"ws_del_{ws['id']}"):
                st.session_state[f"confirm_ws_delete_{ws['id']}"] = True

            if st.session_state.get(f"confirm_ws_delete_{ws['id']}"):
                st.warning("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ?")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", key=f"ws_yes_{ws['id']}"):
                        requests.delete(f"{API_URL}/workstations/{ws['id']}")
                        st.success("–£–¥–∞–ª–µ–Ω–æ ‚ùå")
                        st.session_state[f"confirm_ws_delete_{ws['id']}"] = False
                        st.rerun()
                with col2:
                    if st.button("‚ùå –û—Ç–º–µ–Ω–∞", key=f"ws_no_{ws['id']}"):
                        st.session_state[f"confirm_ws_delete_{ws['id']}"] = False
                        st.rerun()

    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ")
    new_ws_name = st.text_input("–ò–º—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞", key="new_ws_name")
    new_ws_camera = st.selectbox(
        "–ö–∞–º–µ—Ä–∞",
        options=list(camera_options.keys()),
        format_func=lambda x: f"{camera_options.get(x, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
        key="new_ws_camera"
    )

    c1, c2, c3, c4 = st.columns(4)
    new_x = c1.number_input("X", min_value=0, value=0, step=1, key="new_ws_x")
    new_y = c2.number_input("Y", min_value=0, value=0, step=1, key="new_ws_y")
    new_w = c3.number_input("–®–∏—Ä–∏–Ω–∞", min_value=1, value=100, step=1, key="new_ws_w")
    new_h = c4.number_input("–í—ã—Å–æ—Ç–∞", min_value=1, value=100, step=1, key="new_ws_h")

    if st.button("–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ"):
        payload = {
            "name": new_ws_name,
            "camera_id": int(new_ws_camera),
            "x": int(new_x),
            "y": int(new_y),
            "w": int(new_w),
            "h": int(new_h),
            "enabled":True
        }
        r = requests.post(f"{API_URL}/workstations", json=payload)
        if r.status_code == 200:
            st.success("–ú–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")
            # –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
            # st.session_state["new_ws_name"] = ""
            # st.session_state["new_ws_camera"] = list(camera_options.keys())[0] if camera_options else 1
            # st.session_state["new_ws_x"] = 0
            # st.session_state["new_ws_y"] = 0
            # st.session_state["new_ws_w"] = 100
            # st.session_state["new_ws_h"] = 100
            st.rerun()
        else:
            st.error(f"–û—à–∏–±–∫–∞: {r.text}")

