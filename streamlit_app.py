import streamlit as st
import requests

API_URL = "http://127.0.0.1:8005"  # –∞–¥—Ä–µ—Å —Ç–≤–æ–µ–≥–æ FastAPI

st.set_page_config(page_title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–∞–º–∏ –∏ —Ä–∞–±–æ—á–∏–º–∏ –º–µ—Å—Ç–∞–º–∏", layout="wide")

st.title("üé• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–∞–º–∏ –∏ —Ä–∞–±–æ—á–∏–º–∏ –º–µ—Å—Ç–∞–º–∏")

# –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
st.markdown(
    """
    <style>
        #MainMenu {visibility: hidden;}
        footer {visibility: hidden;}
        header {visibility: hidden;}
    </style>
     <style>
        /* —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ —Å–≤–µ—Ä—Ö—É */
        .block-container {
            padding-top: 1rem; /* –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ~6rem */
        }
    </style>
    
    """,
    unsafe_allow_html=True
)

tab1, tab2 = st.tabs(["–ö–∞–º–µ—Ä—ã", "–†–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞"])

# ----- –ö–ê–ú–ï–†–´ -----
with tab1:
    st.header("–°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä")

    # –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä
    try:
        cameras = requests.get(f"{API_URL}/cameras").json()
    except Exception as e:
        st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        cameras = []

    for cam in cameras:
        status_icon = "üü¢" if cam["enabled"] else "üî¥"
        with st.expander(f"üì∑ {cam['name']} {status_icon}"):
            name = st.text_input("–ò–º—è", cam["name"], key=f"name_{cam['id']}")
            rtsp = st.text_input("RTSP", cam["rtsp_url"], key=f"rtsp_{cam['id']}")
            interval = st.number_input("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã (—Å–µ–∫)",  min_value=1, value=cam["poll_interval_s"], key=f"int_{cam['id']}")
            enabled = st.checkbox("–ö–∞–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è", value=cam["enabled"], key=f"enabled_{cam['id']}")

            st.markdown("---")

            # üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–æ–º: snapshot –∏–ª–∏ stream
            key_state = f"stream_active_{cam['id']}"
            if key_state not in st.session_state:
                st.session_state[key_state] = False  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Ç–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω

            if not st.session_state[key_state]:
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º snapshot
                st.markdown(
                    f"""
                            <img src="{API_URL}/cameras/{cam['id']}/snapshot"
                                 width="640" height="480"
                                 style="border:1px solid #ccc;"/>
                            """,
                    unsafe_allow_html=True
                )
                if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫", key=f"start_stream_{cam['id']}"):
                    st.session_state[key_state] = True
                    st.rerun()
            else:
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º stream
                st.markdown(
                    f"""
                            <img src="{API_URL}/cameras/{cam['id']}/stream"
                                 width="640" height="480"
                                 style="border:1px solid #ccc;"/>
                            """,
                    unsafe_allow_html=True
                )
                if st.button("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫", key=f"stop_stream_{cam['id']}"):
                    st.session_state[key_state] = False
                    st.rerun()

            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_{cam['id']}"):
                payload = {"name": name, "rtsp_url": rtsp, "poll_interval_s": interval, "enabled": enabled}
                requests.put(f"{API_URL}/cameras/{cam['id']}", json=payload)
                st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")



            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å ‚Üí —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥
            if st.button(f"‚ùå –£–¥–∞–ª–∏—Ç—å  –∫–∞–º–µ—Ä—É", key=f"del_{cam['id']}"):
                st.session_state[f"confirm_delete_{cam['id']}"] = True

            # –ï—Å–ª–∏ —Ñ–ª–∞–≥ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if st.session_state.get(f"confirm_delete_{cam['id']}"):
                st.warning("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞–º–µ—Ä—É?")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", key=f"yes_{cam['id']}"):
                        requests.delete(f"{API_URL}/cameras/{cam['id']}")
                        st.success("–£–¥–∞–ª–µ–Ω–æ ‚ùå")
                        st.session_state[f"confirm_delete_{cam['id']}"] = False
                        st.rerun()  # —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ä–∞–∑—É
                with col2:
                    if st.button("‚ùå –û—Ç–º–µ–Ω–∞", key=f"no_{cam['id']}"):
                        st.session_state[f"confirm_delete_{cam['id']}"] = False
                        st.rerun()  # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞–º–µ—Ä—É")
    new_name = st.text_input("–ò–º—è –Ω–æ–≤–æ–π –∫–∞–º–µ—Ä—ã")
    new_rtsp = st.text_input("RTSP –Ω–æ–≤–æ–π –∫–∞–º–µ—Ä—ã")
    new_interval = st.number_input("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã (—Å–µ–∫)", value=10)

    if st.button("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É"):
        payload = {"name": new_name, "rtsp_url": new_rtsp, "poll_interval_s": new_interval, "enabled" : True}
        requests.post(f"{API_URL}/cameras", json=payload)
        st.success("–ö–∞–º–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
        for k in ["new_name", "new_rtsp", "new_interval"]:
            st.session_state[k] = "" if "name" in k or "rtsp" in k else 10
        st.rerun()

    # ----- –†–ê–ë–û–ß–ò–ï –ú–ï–°–¢–ê -----
# with tab2:
#     st.header("–†–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞")
#
#     try:
#         workplaces = requests.get(f"{API_URL}/api/workplaces").json()
#     except Exception as e:
#         st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
#         workplaces = []
#
#     for ws in workplaces:
#         with st.expander(f"üë∑ {ws['name']} (ID {ws['id']})"):
#             name = st.text_input("–ò–º—è", ws["name"], key=f"ws_name_{ws['id']}")
#             camera_id = st.number_input("ID –∫–∞–º–µ—Ä—ã", value=ws["camera_id"], key=f"cam_{ws['id']}")
#             roi = st.text_input("ROI", ws["roi"], key=f"roi_{ws['id']}")
#
#             if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"ws_save_{ws['id']}"):
#                 payload = {"name": name, "camera_id": camera_id, "roi": roi}
#                 requests.put(f"{API_URL}/workplaces/{ws['id']}", json=payload)
#                 st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
#
#             if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å", key=f"ws_delete_{ws['id']}"):
#                 requests.delete(f"{API_URL}/workplaces/{ws['id']}")
#                 st.warning("–£–¥–∞–ª–µ–Ω–æ ‚ùå")
#
#     st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ")
#     new_ws_name = st.text_input("–ò–º—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞")
#     new_ws_camera = st.number_input("ID –∫–∞–º–µ—Ä—ã", value=1)
#     new_ws_roi = st.text_input("ROI (x,y,w,h)")
#
#     if st.button("–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ"):
#         payload = {"name": new_ws_name, "camera_id": new_ws_camera, "roi": new_ws_roi}
#         requests.post(f"{API_URL}/workplaces", json=payload)
#         st.success("–ú–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")
